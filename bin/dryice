#! /usr/bin/env node
// vim:set ft=javascript tw=80 ts=4 sw=4 sts=4 sta et:
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Skywriter.
 *
 * The Initial Developer of the Original Code is
 * Mozilla.
 * Portions created by the Initial Developer are Copyright (C) 2009
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Mihai Sucan <mihai.sucan@gmail.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

var dryice = require("dryice");
var Step = require("step");
var fs = require("fs");

var args = process.argv.slice(2);

var known_options = ["basedir", "input_files", "input_encoding",
    "input_filters", "output_filters", "output_encoding", "output_file",
    "uglifyjs_options"];

function run() {
    if (!args || args.length < 1) {
        console.log("Please point to a manifest.json file.");
        return;
    }

    Step(
        function readFile() {
            fs.readFile(args[0], "utf8", this);
        },

        function parseManifest(err, data) {
            if (err) {
                throw err;
            }

            var options = JSON.parse(data);
            var build = new dryice.build();

            known_options.forEach(function(key) {
                if (key in options && key in build) {
                    build[key] = options[key];
                }
            });

            build.run(this);
        },

        function buildDone(err) {
            if (err) {
                throw err;
            }
            console.log("build completed");
        }
    );
}

run();

